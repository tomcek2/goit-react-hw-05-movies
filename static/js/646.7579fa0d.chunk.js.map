{"version":3,"file":"static/js/646.7579fa0d.chunk.js","mappings":"kOASMA,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cANF,+NA+CF,UArC0B,SAAHC,GAAmB,IAAbC,EAAKD,EAALC,MAC3BC,GAA4CC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjDI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GAClCI,GAAWC,EAAAA,EAAAA,MAEXC,EAAW,GAAAC,OAhBF,8BAgBgB,yBAAAA,OAAwBV,EAAK,8CAc5D,OAZAW,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEMC,EAAAA,EAAAA,GAAMb,EAAaf,GAAS,KAAD,EAAAuB,EAAAE,EAAAI,KAA1CL,EAAID,EAAJC,KACRZ,EAAkBY,EAAKM,SAASL,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAEhCO,QAAQC,MAAM,SAAQR,EAAAM,IAAU,yBAAAN,EAAAS,OAAA,GAAAZ,EAAA,kBAEnC,kBAPiB,OAAAH,EAAAgB,MAAA,KAAAC,UAAA,KAQlBlB,GACF,GAAG,CAACZ,KAGF+B,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAAAC,SACF5B,EAAe6B,KAAI,SAAAC,GAAK,OACvBJ,EAAAA,EAAAA,KAACK,EAAAA,GAAQ,CAAAH,UACPI,EAAAA,EAAAA,MAACD,EAAAA,GAAQ,CAACE,GAAE,GAAA5B,OAAKyB,EAAMI,IAAMC,MAAO,CAAEC,KAAMlC,GAAW0B,SAAA,EACrDF,EAAAA,EAAAA,KAAA,OACEW,IAAG,mCAAAhC,OAAqCyB,EAAMQ,aAAe,IAC7DC,MAAM,MACNC,OAAO,MACPC,IAAI,MAENf,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CAAAd,SAAEE,EAAMa,qBARHb,EAAMI,GAUV,KAInB,C","sources":["components/MovieResponseList.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { List, ListLink, Title } from 'components/Styles.styled';\nimport { useLocation } from 'react-router-dom';\n\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MWNlODk4Njg1Y2Y3Y2YzYWU4OWE5YjY4NDBlNjU1OCIsInN1YiI6IjY1YzEzNDI1MDMxZGViMDE4M2YzYTUwOCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.z0M1Gt0gZ7sp1cqOFs9beKTDiVHIn15JzYaDT_F6w7M';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization: API_KEY,\n  },\n};\n\nconst MovieResponseList = ({ title }) => {\n  const [searchResponse, setSearchResponse] = useState([]);\n  const location = useLocation();\n\n  const titleSearch = `${BASE_URL}3/search/movie?query=${title}&include_adult=false&language=en-US&page=1`;\n\n  useEffect(() => {\n    const getTitleList = async () => {\n      try {\n        const { data } = await axios(titleSearch, options);\n        setSearchResponse(data.results);\n      } catch (error) {\n        console.error('error:' + error);\n      }\n    };\n    getTitleList();\n  }, [title]); // eslint-disable-line\n\n  return (\n    <List>\n      {searchResponse.map(finds => (\n        <ListLink key={finds.id}>\n          <ListLink to={`${finds.id}`} state={{ from: location }}>\n            <img\n              src={`https://image.tmdb.org/t/p/w500/${finds.poster_path || ''}`}\n              width=\"200\"\n              height=\"300\"\n              alt=\"\"\n            />\n            <Title>{finds.original_title}</Title>\n          </ListLink>\n        </ListLink>\n      ))}\n    </List>\n  );\n};\n\nexport default MovieResponseList;\n"],"names":["options","method","headers","accept","Authorization","_ref","title","_useState","useState","_useState2","_slicedToArray","searchResponse","setSearchResponse","location","useLocation","titleSearch","concat","useEffect","getTitleList","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$axios","data","_context","prev","next","axios","sent","results","t0","console","error","stop","apply","arguments","_jsx","List","children","map","finds","ListLink","_jsxs","to","id","state","from","src","poster_path","width","height","alt","Title","original_title"],"sourceRoot":""}